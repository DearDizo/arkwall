#!/usr/sbin/nft -f


#
## flush all rules
#
flush ruleset


#
## includes
#
include "ipv4.blocklist.nft"
include "ipv6.blocklist.nft"


#
## some needed definitions
#
define LAN_4  = {  }
define DNS_4  = { 149.112.112.112, 1.1.1.1, 9.9.9.9 }

define LAN_6  = {  } 
define DNS_6  = { 2620:fe::fe, 2620:fe::9 }

define DMZ_4  = {  }
define DMZ_6  = {  }


#
## interfaces
#
define IFACE  = ""
define LHOST  = "lo"


#
## ports
#
define SSH_PORT  = 33221 # we should not use any default ports ...



table inet Styx {

    # the earliest action ever happens here.
    # everything defined in the lists is dropped right here, before anything else happens. 
    # saves resources and does not return any response to the source.
    # - "you shall not pass!"

    chain PREROUTE {
        
        type filter hook prerouting priority raw ; policy accept ;

        iifname $IFACE ip  saddr $Blocklistv4  drop;
        iifname $IFACE ip6 saddr $Blocklistv6  drop;

    }
}

table inet Charon {


    # very very basic rules ;)
    chain INPUT {

        type filter hook input priority 0 ; policy drop ;

        ct state { established , related } accept
        ct state invalid drop


        #
        ## ipv6 essentials 
        #
        ip6 nexthdr ipv6-icmp icmpv6 type echo-request counter packets 0 bytes 0 accept
		
        ip6 nexthdr ipv6-icmp ip6 hoplimit 1 icmpv6 type { 
            nd-neighbor-advert, 
            nd-neighbor-solicit, 
            nd-router-advert} 
        counter accept
		
        ip6 nexthdr ipv6-icmp ip6 hoplimit 255 icmpv6 type { 
            nd-neighbor-advert, 
            nd-neighbor-solicit, 
            nd-router-advert} 
        counter accept
         

        #
        ## localhost rule 
        #
        iifname $LHOST ip saddr != 127.0.0.0/8 ip daddr != 127.0.0.0/8 counter drop


        #
        ## ssh 
        #
        iifname $IFACE ip  saddr $LAN_4 tcp dport $SSH_PORT accept
        iifname $IFACE ip6 saddr $LAN_6 tcp dport $SSH_PORT accept

    }



    chain FORWARD {
        type filter hook forward priority 0 ; policy drop ;
    }

    

    chain OUTPUT {
        type filter hook output priority 0 ; policy accept ;
    }
}
